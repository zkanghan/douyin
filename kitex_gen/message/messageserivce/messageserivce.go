// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageserivce

import (
	"context"
	message "douyin/kitex_gen/message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageSerivceServiceInfo
}

var messageSerivceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageSerivce"
	handlerType := (*message.MessageSerivce)(nil)
	methods := map[string]kitex.MethodInfo{
		"Send":   kitex.NewMethodInfo(sendHandler, newMessageSerivceSendArgs, newMessageSerivceSendResult, false),
		"Record": kitex.NewMethodInfo(recordHandler, newMessageSerivceRecordArgs, newMessageSerivceRecordResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func sendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageSerivceSendArgs)
	realResult := result.(*message.MessageSerivceSendResult)
	success, err := handler.(message.MessageSerivce).Send(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageSerivceSendArgs() interface{} {
	return message.NewMessageSerivceSendArgs()
}

func newMessageSerivceSendResult() interface{} {
	return message.NewMessageSerivceSendResult()
}

func recordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageSerivceRecordArgs)
	realResult := result.(*message.MessageSerivceRecordResult)
	success, err := handler.(message.MessageSerivce).Record(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageSerivceRecordArgs() interface{} {
	return message.NewMessageSerivceRecordArgs()
}

func newMessageSerivceRecordResult() interface{} {
	return message.NewMessageSerivceRecordResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Send(ctx context.Context, req *message.ActionRequest) (r *message.ActionResponse, err error) {
	var _args message.MessageSerivceSendArgs
	_args.Req = req
	var _result message.MessageSerivceSendResult
	if err = p.c.Call(ctx, "Send", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Record(ctx context.Context, req *message.RecordRequest) (r *message.RecordResponse, err error) {
	var _args message.MessageSerivceRecordArgs
	_args.Req = req
	var _result message.MessageSerivceRecordResult
	if err = p.c.Call(ctx, "Record", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
