// Code generated by Validator v0.1.4. DO NOT EDIT.

package relation

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *ActionRequest) IsValid() error {
	if p.Token != nil {
		if err := p.Token.IsValid(); err != nil {
			return fmt.Errorf("filed Token not valid, %w", err)
		}
	}
	_src := []int32{int32(1), int32(2)}
	var _exist bool
	for _, src := range _src {
		if p.ActionType == int32(src) {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field ActionType in rule failed, current value: %v", p.ActionType)
	}
	return nil
}
func (p *ActionResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *FollowListRequest) IsValid() error {
	if p.Token != nil {
		if err := p.Token.IsValid(); err != nil {
			return fmt.Errorf("filed Token not valid, %w", err)
		}
	}
	return nil
}
func (p *FollowListResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *User) IsValid() error {
	return nil
}
func (p *FollowerListRequest) IsValid() error {
	if p.Token != nil {
		if err := p.Token.IsValid(); err != nil {
			return fmt.Errorf("filed Token not valid, %w", err)
		}
	}
	return nil
}
func (p *FollowerListResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *FriendListRequest) IsValid() error {
	if p.Token != nil {
		if err := p.Token.IsValid(); err != nil {
			return fmt.Errorf("filed Token not valid, %w", err)
		}
	}
	return nil
}
func (p *FriendListResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *FriendUser) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *MGetFollowRequest) IsValid() error {
	if len(p.ToUserId) < int(1) {
		return fmt.Errorf("field ToUserId MinLen rule failed, current value: %v", p.ToUserId)
	}
	return nil
}
func (p *MGetFollowResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
